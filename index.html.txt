<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Análise de Frentistas</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        :root {
            --primary-red: #8B0000;
            --mustard-yellow: #FFDB58;
            --white: #FFFFFF;
            --light-gray: #F5F5F5;
            --dark-gray: #333333;
            --success-green: #28a745;
            --warning-orange: #fd7e14;
            --danger-red: #dc3545;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, var(--light-gray) 0%, var(--white) 100%);
            color: var(--dark-gray);
        }

        .header {
            background: linear-gradient(90deg, var(--primary-red) 0%, #A52A2A 100%);
            color: var(--white);
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Seção de Importação */
        .import-section {
            background: var(--white);
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 20px;
            box-shadow: 0 6px 16px rgba(0,0,0,0.1);
            border-left: 5px solid var(--mustard-yellow);
            text-align: center;
        }

        .import-title {
            font-size: 1.8em;
            color: var(--primary-red);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .file-upload-area {
            border: 3px dashed var(--mustard-yellow);
            border-radius: 12px;
            padding: 40px;
            margin: 20px 0;
            transition: all 0.3s ease;
            cursor: pointer;
            background: var(--light-gray);
        }

        .file-upload-area:hover {
            border-color: var(--primary-red);
            background: #fafafa;
            transform: translateY(-2px);
        }

        .file-upload-area.dragover {
            border-color: var(--success-green);
            background: #f0fff0;
        }

        .upload-icon {
            font-size: 3em;
            color: var(--mustard-yellow);
            margin-bottom: 15px;
        }

        .upload-text {
            font-size: 1.2em;
            color: var(--dark-gray);
            margin-bottom: 10px;
        }

        .upload-subtext {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 20px;
        }

        .file-input {
            display: none;
        }

        .upload-btn {
            background: linear-gradient(90deg, var(--primary-red) 0%, #A52A2A 100%);
            color: var(--white);
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0 10px;
        }

        .upload-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(139, 0, 0, 0.3);
        }

        .start-btn {
            background: linear-gradient(90deg, var(--success-green) 0%, #20c997 100%);
            color: var(--white);
            border: none;
            padding: 15px 40px;
            border-radius: 8px;
            font-size: 1.3em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 20px;
            display: none;
        }

        .start-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(40, 167, 69, 0.3);
        }

        .start-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .file-info {
            background: var(--light-gray);
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            display: none;
        }

        .file-info.show {
            display: block;
        }

        .file-name {
            font-weight: bold;
            color: var(--primary-red);
            margin-bottom: 5px;
        }

        .file-details {
            font-size: 0.9em;
            color: #666;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--light-gray);
            border-radius: 4px;
            margin: 10px 0;
            overflow: hidden;
            display: none;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--success-green) 0%, #20c997 100%);
            width: 0%;
            transition: width 0.3s ease;
        }

        .status-message {
            padding: 10px;
            border-radius: 6px;
            margin: 10px 0;
            display: none;
        }

        .status-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status-warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        /* Template de Exemplo */
        .template-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid var(--warning-orange);
        }

        .template-title {
            font-size: 1.2em;
            color: var(--primary-red);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .template-columns {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin: 15px 0;
        }

        .column-item {
            background: var(--white);
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 0.9em;
            border: 1px solid #dee2e6;
        }

        .aptidao-info {
            background: #e7f3ff;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            border-left: 4px solid var(--success-green);
        }

        .aptidao-info h4 {
            color: var(--primary-red);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .aptidao-criteria {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-top: 10px;
        }

        .criteria-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            border-radius: 6px;
        }

        .criteria-apto {
            background: #d4edda;
            color: #155724;
        }

        .criteria-nao-apto {
            background: #f8d7da;
            color: #721c24;
        }

        .download-template-btn {
            background: var(--warning-orange);
            color: var(--white);
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 0.9em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .download-template-btn:hover {
            background: #e8590c;
            transform: translateY(-1px);
        }

        /* Dashboard oculto inicialmente */
        .dashboard-content {
            display: none;
        }

        .dashboard-content.show {
            display: block;
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Estilos do dashboard */
        .filters-section {
            background: var(--white);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border-left: 5px solid var(--mustard-yellow);
        }

        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            align-items: center;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            font-weight: bold;
            margin-bottom: 5px;
            color: var(--primary-red);
        }

        .filter-group select, .filter-group input {
            padding: 10px;
            border: 2px solid var(--mustard-yellow);
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        .filter-group select:focus, .filter-group input:focus {
            outline: none;
            border-color: var(--primary-red);
        }

        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-container {
            background: var(--white);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 6px 16px rgba(0,0,0,0.1);
            border-top: 4px solid var(--primary-red);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .chart-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        }

        .chart-title {
            font-size: 1.4em;
            font-weight: bold;
            color: var(--primary-red);
            margin-bottom: 15px;
            text-align: center;
        }

        .rankings-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .ranking-card {
            background: var(--white);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 6px 16px rgba(0,0,0,0.1);
            border-left: 5px solid var(--mustard-yellow);
        }

        .ranking-title {
            font-size: 1.3em;
            font-weight: bold;
            color: var(--primary-red);
            margin-bottom: 15px;
            text-align: center;
        }

        .ranking-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin-bottom: 8px;
            background: var(--light-gray);
            border-radius: 8px;
            transition: background 0.3s;
        }

        .ranking-item:hover {
            background: var(--mustard-yellow);
            color: var(--dark-gray);
        }

        .ranking-item.apto {
            border-left: 4px solid var(--success-green);
        }

        .ranking-item.nao-apto {
            border-left: 4px solid var(--danger-red);
        }

        .ranking-position {
            font-weight: bold;
            color: var(--primary-red);
            font-size: 1.1em;
        }

        .ranking-name {
            flex-grow: 1;
            margin-left: 10px;
            font-weight: 500;
        }

        .ranking-value {
            font-weight: bold;
            color: var(--primary-red);
        }

        .aptidao-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
            margin-left: 8px;
        }

        .badge-apto {
            background: var(--success-green);
            color: var(--white);
        }

        .badge-nao-apto {
            background: var(--danger-red);
            color: var(--white);
        }

        /* Cards de Resumo Interativos */
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .summary-card {
            background: linear-gradient(135deg, var(--primary-red) 0%, #A52A2A 100%);
            color: var(--white);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.2);
        }

        .summary-card.clickable::before {
            content: '👆';
            position: absolute;
            top: 5px;
            right: 8px;
            font-size: 0.8em;
            opacity: 0.7;
        }

        .summary-card.active {
            border: 3px solid var(--mustard-yellow);
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(255, 219, 88, 0.4);
        }

        .summary-card.active::after {
            content: '✓';
            position: absolute;
            top: 5px;
            left: 8px;
            font-size: 1.2em;
            color: var(--mustard-yellow);
            font-weight: bold;
        }

        .summary-card.apto {
            background: linear-gradient(135deg, var(--success-green) 0%, #20c997 100%);
        }

        .summary-card.nao-apto {
            background: linear-gradient(135deg, var(--danger-red) 0%, #c82333 100%);
        }

        .summary-card h3 {
            font-size: 2em;
            margin-bottom: 5px;
        }

        .summary-card p {
            font-size: 1.1em;
            opacity: 0.9;
        }

        .card-subtitle {
            font-size: 0.8em;
            opacity: 0.8;
            margin-top: 5px;
        }

        /* Indicador de filtro ativo */
        .filter-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--mustard-yellow);
            color: var(--dark-gray);
            padding: 10px 15px;
            border-radius: 8px;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            display: none;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }

        .filter-indicator.show {
            display: block;
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @media (max-width: 768px) {
            .charts-grid {
                grid-template-columns: 1fr;
            }
            
            .rankings-section {
                grid-template-columns: 1fr;
            }
            
            .summary-cards {
                grid-template-columns: repeat(2, 1fr);
            }

            .template-columns {
                grid-template-columns: 1fr;
            }

            .aptidao-criteria {
                grid-template-columns: 1fr;
            }

            .filter-indicator {
                position: relative;
                top: auto;
                right: auto;
                margin-bottom: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>📊 Dashboard de Análise de Frentistas</h1>
        <p>Campanha Promocional - Análise de Desempenho e Bonificação</p>
    </div>

    <!-- Indicador de filtro ativo -->
    <div class="filter-indicator" id="filterIndicator">
        🔍 Filtro ativo: <span id="filterText"></span>
    </div>

    <div class="dashboard-container">
        <!-- Seção de Importação -->
        <div class="import-section">
            <div class="import-title">
                📁 Importar Base de Dados Excel
            </div>
            
            <div class="template-section">
                <div class="template-title">
                    ⚠️ Formato Esperado do Arquivo Excel
                </div>
                <p style="margin-bottom: 15px;">Seu arquivo Excel deve conter as seguintes colunas:</p>
                <div class="template-columns">
                    <div class="column-item"><strong>Nome</strong> - Nome do frentista</div>
                    <div class="column-item"><strong>Estado</strong> - UF (SP, RJ, MG, etc.)</div>
                    <div class="column-item"><strong>Posto</strong> - Nome do posto</div>
                    <div class="column-item"><strong>Volume_Abastecido</strong> - Litros</div>
                    <div class="column-item"><strong>Clientes_Atendidos</strong> - Quantidade</div>
                    <div class="column-item"><strong>Recorrencia</strong> - Valor decimal (0.75)</div>
                    <div class="column-item"><strong>Comissao_Volume</strong> - Valor em R\$</div>
                    <div class="column-item"><strong>Comissao_Cliente</strong> - Valor em R\$</div>
                    <div class="column-item"><strong>Comissao_Total</strong> - Valor em R\$</div>
                </div>

                <div class="aptidao-info">
                    <h4>🎯 Critério de Aptidão</h4>
                    <p>O sistema classificará automaticamente os frentistas baseado na comissão total:</p>
                    <div class="aptidao-criteria">
                        <div class="criteria-item criteria-apto">
                            <span>✅</span>
                            <strong>APTO:</strong> Comissão Total ≥ R\$ 100,00
                        </div>
                        <div class="criteria-item criteria-nao-apto">
                            <span>❌</span>
                            <strong>NÃO APTO:</strong> Comissão Total < R\$ 100,00
                        </div>
                    </div>
                </div>

                <button class="download-template-btn" onclick="downloadTemplate()">
                    📥 Baixar Template Excel
                </button>
            </div>

            <div class="file-upload-area" id="uploadArea">
                <div class="upload-icon">📁</div>
                <div class="upload-text">Arraste e solte seu arquivo Excel aqui</div>
                <div class="upload-subtext">ou clique para selecionar o arquivo</div>
                <div class="upload-subtext">Formatos aceitos: .xlsx, .xls</div>
                <button class="upload-btn" onclick="document.getElementById('fileInput').click()">
                    Selecionar Arquivo
                </button>
            </div>

            <input type="file" id="fileInput" class="file-input" accept=".xlsx,.xls" onchange="handleFileSelect(event)">
            
            <div class="file-info" id="fileInfo">
                <div class="file-name" id="fileName"></div>
                <div class="file-details" id="fileDetails"></div>
            </div>

            <div class="progress-bar" id="progressBar">
                <div class="progress-fill" id="progressFill"></div>
            </div>

            <div class="status-message" id="statusMessage"></div>

            <button class="start-btn" id="startBtn" onclick="generateDashboard()">
                🚀 Começar Análise
            </button>
        </div>

        <!-- Conteúdo do Dashboard (oculto inicialmente) -->
        <div class="dashboard-content" id="dashboardContent">
            <!-- Filtros -->
            <div class="filters-section">
                <h3 style="color: var(--primary-red); margin-bottom: 15px;">🔍 Filtros de Análise</h3>
                <div class="filters-grid">
                    <div class="filter-group">
                        <label for="estadoFilter">Estado:</label>
                        <select id="estadoFilter" onchange="updateCharts()">
                            <option value="todos">Todos os Estados</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="postoFilter">Posto:</label>
                        <select id="postoFilter" onchange="updateCharts()">
                            <option value="todos">Todos os Postos</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="aptidaoFilter">Aptidão:</label>
                        <select id="aptidaoFilter" onchange="updateCharts()">
                            <option value="todos">Todos</option>
                            <option value="apto">Aptos (≥ R\$ 100)</option>
                            <option value="nao_apto">Não Aptos (< R\$ 100)</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="metricaFilter">Métrica Principal:</label>
                        <select id="metricaFilter" onchange="updateCharts()">
                            <option value="comissao_total">Comissão Total</option>
                            <option value="volume">Volume Abastecido</option>
                            <option value="clientes">Clientes Atendidos</option>
                            <option value="recorrencia">Recorrência</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <button class="upload-btn" onclick="showImportSection()" style="margin-top: 20px;">
                            📁 Importar Novo Arquivo
                        </button>
                    </div>
                </div>
            </div>

            <!-- Cards de Resumo Clicáveis -->
            <div class="summary-cards">
                <div class="summary-card clickable" id="cardTotalFrentistas" onclick="handleCardClick('total')" title="Clique para mostrar todos os frentistas">
                    <h3 id="totalFrentistas">0</h3>
                    <p>Total de Frentistas</p>
                    <div class="card-subtitle">Clique para filtrar</div>
                </div>
                <div class="summary-card apto clickable" id="cardTotalAptos" onclick="handleCardClick('apto')" title="Clique para filtrar apenas frentistas aptos">
                    <h3 id="totalAptos">0</h3>
                    <p>Frentistas Aptos</p>
                    <div class="card-subtitle">≥ R\$ 100,00</div>
                </div>
                <div class="summary-card nao-apto clickable" id="cardTotalNaoAptos" onclick="handleCardClick('nao_apto')" title="Clique para filtrar apenas frentistas não aptos">
                    <h3 id="totalNaoAptos">0</h3>
                    <p>Frentistas Não Aptos</p>
                    <div class="card-subtitle">< R\$ 100,00</div>
                </div>
                <div class="summary-card" id="cardTotalPostos" title="Informação sobre postos participantes">
                    <h3 id="totalPostos">0</h3>
                    <p>Postos Participantes</p>
                </div>
                <div class="summary-card" id="cardVolumeTotal" title="Volume total abastecido">
                    <h3 id="volumeTotal">0L</h3>
                    <p>Litros Abastecidos</p>
                </div>
                <div class="summary-card" id="cardComissaoTotal" title="Comissão total paga">
                    <h3 id="comissaoTotal">R\$ 0</h3>
                    <p>Comissão Total</p>
                </div>
            </div>

            <!-- Gráficos Principais -->
            <div class="charts-grid">
                <div class="chart-container">
                    <div class="chart-title">🥧 Distribuição de Aptidão</div>
                    <div id="pieChart" style="height: 400px;"></div>
                </div>
                
                <div class="chart-container">
                    <div class="chart-title">📊 TOP 10 Frentistas - Desempenho Geral</div>
                    <div id="barChart" style="height: 400px;"></div>
                </div>
                
                <div class="chart-container">
                    <div class="chart-title">🏪 Aptidão por Estado</div>
                    <div id="postosChart" style="height: 400px;"></div>
                </div>
                
                <div class="chart-container">
                    <div class="chart-title">📈 Análise de Volume vs Comissão</div>
                    <div id="scatterChart" style="height: 400px;"></div>
                </div>
            </div>

            <!-- Rankings -->
            <div class="rankings-section">
                <div class="ranking-card">
                    <div class="ranking-title">🏆 TOP 5 Frentistas Aptos</div>
                    <div id="rankingFrentistasAptos"></div>
                </div>
                
                <div class="ranking-card">
                    <div class="ranking-title">⚠️ Frentistas Não Aptos</div>
                    <div id="rankingFrentistasNaoAptos"></div>
                </div>
                
                <div class="ranking-card">
                    <div class="ranking-title">🏪 TOP 10 Postos</div>
                    <div id="rankingPostos"></div>
                </div>
                
                <div class="ranking-card">
                    <div class="ranking-title">📍 Ranking por Estados</div>
                    <div id="rankingEstados"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Variáveis globais
        let dadosImportados = null;
        let dadosProcessados = {
            frentistas: [],
            postos: [],
            estados: []
        };
        let filtroAtivo = null;

        // Configuração de cores
        const cores = {
            primaria: '#8B0000',
            secundaria: '#FFDB58',
            branco: '#FFFFFF',
            verde: '#28a745',
            vermelho: '#dc3545',
            gradiente: ['#8B0000', '#A52A2A', '#CD5C5C', '#F08080', '#FFDB58']
        };

        // Constante para critério de apti
              const LIMITE_APTIDAO = 100.00;

        // Função para manipular cliques nos cards
        function handleCardClick(tipo) {
            // Remover classe active de todos os cards
            document.querySelectorAll('.summary-card').forEach(card => {
                card.classList.remove('active');
            });

            // Resetar filtros se clicar no mesmo card ativo
            if (filtroAtivo === tipo) {
                filtroAtivo = null;
                document.getElementById('aptidaoFilter').value = 'todos';
                hideFilterIndicator();
            } else {
                // Aplicar novo filtro
                filtroAtivo = tipo;
                
                // Adicionar classe active ao card clicado
                const cardElement = document.getElementById(`card${tipo === 'total' ? 'TotalFrentistas' : tipo === 'apto' ? 'TotalAptos' : 'TotalNaoAptos'}`);
                if (cardElement) {
                    cardElement.classList.add('active');
                }

                // Atualizar filtro de aptidão
                if (tipo === 'apto') {
                    document.getElementById('aptidaoFilter').value = 'apto';
                    showFilterIndicator('Apenas Frentistas Aptos');
                } else if (tipo === 'nao_apto') {
                    document.getElementById('aptidaoFilter').value = 'nao_apto';
                    showFilterIndicator('Apenas Frentistas Não Aptos');
                } else if (tipo === 'total') {
                    document.getElementById('aptidaoFilter').value = 'todos';
                    showFilterIndicator('Todos os Frentistas');
                }
            }

            // Atualizar gráficos
            updateCharts();
        }

        // Função para mostrar indicador de filtro
        function showFilterIndicator(texto) {
            const indicator = document.getElementById('filterIndicator');
            const filterText = document.getElementById('filterText');
            filterText.textContent = texto;
            indicator.classList.add('show');
        }

        // Função para ocultar indicador de filtro
        function hideFilterIndicator() {
            const indicator = document.getElementById('filterIndicator');
            indicator.classList.remove('show');
        }

        // Função para baixar template Excel
        function downloadTemplate() {
            const templateData = [
                {
                    'Nome': 'João Silva',
                    'Estado': 'SP',
                    'Posto': 'Posto Central SP',
                    'Volume_Abastecido': 15420,
                    'Clientes_Atendidos': 234,
                    'Recorrencia': 0.78,
                    'Comissao_Volume': 1850,
                    'Comissao_Cliente': 2000,
                    'Comissao_Total': 3850
                },
                {
                    'Nome': 'Maria Santos',
                    'Estado': 'RJ',
                    'Posto': 'Posto Copacabana',
                    'Volume_Abastecido': 14890,
                    'Clientes_Atendidos': 221,
                    'Recorrencia': 0.82,
                    'Comissao_Volume': 1720,
                    'Comissao_Cliente': 2000,
                    'Comissao_Total': 3720
                },
                {
                    'Nome': 'Carlos Oliveira',
                    'Estado': 'MG',
                    'Posto': 'Posto BH Norte',
                    'Volume_Abastecido': 8650,
                    'Clientes_Atendidos': 98,
                    'Recorrencia': 0.65,
                    'Comissao_Volume': 420,
                    'Comissao_Cliente': 980,
                    'Comissao_Total': 85.50
                },
                {
                    'Nome': 'Ana Costa',
                    'Estado': 'SP',
                    'Posto': 'Posto Paulista',
                    'Volume_Abastecido': 13200,
                    'Clientes_Atendidos': 187,
                    'Recorrencia': 0.80,
                    'Comissao_Volume': 1300,
                    'Comissao_Cliente': 2000,
                    'Comissao_Total': 3300
                },
                {
                    'Nome': 'Pedro Lima',
                    'Estado': 'RS',
                    'Posto': 'Posto POA Sul',
                    'Volume_Abastecido': 5800,
                    'Clientes_Atendidos': 76,
                    'Recorrencia': 0.43,
                    'Comissao_Volume': 280,
                    'Comissao_Cliente': 760,
                    'Comissao_Total': 65.00
                }
            ];

            const ws = XLSX.utils.json_to_sheet(templateData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Frentistas");
            XLSX.writeFile(wb, "template_frentistas_com_aptidao.xlsx");
        }

        // Configurar drag and drop
        function setupDragAndDrop() {
            const uploadArea = document.getElementById('uploadArea');
            
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFile(files[0]);
                }
            });

            uploadArea.addEventListener('click', () => {
                document.getElementById('fileInput').click();
            });
        }

        // Manipular seleção de arquivo
        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (file) {
                handleFile(file);
            }
        }

        // Processar arquivo
        function handleFile(file) {
            // Validar tipo de arquivo
            const validTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 
                               'application/vnd.ms-excel'];
            
            if (!validTypes.includes(file.type)) {
                showStatus('Tipo de arquivo inválido. Use apenas arquivos Excel (.xlsx, .xls)', 'error');
                return;
            }

            // Mostrar informações do arquivo
            const fileInfo = document.getElementById('fileInfo');
            const fileName = document.getElementById('fileName');
            const fileDetails = document.getElementById('fileDetails');
            
            fileName.textContent = file.name;
            fileDetails.textContent = `Tamanho: ${(file.size / 1024 / 1024).toFixed(2)} MB | Tipo: ${file.type}`;
            fileInfo.classList.add('show');

            // Mostrar barra de progresso
            const progressBar = document.getElementById('progressBar');
            const progressFill = document.getElementById('progressFill');
            progressBar.style.display = 'block';

            // Simular progresso de upload
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += 10;
                progressFill.style.width = progress + '%';
                
                if (progress >= 100) {
                    clearInterval(progressInterval);
                    processExcelFile(file);
                }
            }, 100);
        }

        // Processar arquivo Excel
        function processExcelFile(file) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    // Pegar a primeira planilha
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];
                    
                    // Converter para JSON
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);
                    
                    if (jsonData.length === 0) {
                        showStatus('Arquivo Excel está vazio ou não contém dados válidos.', 'error');
                        return;
                    }

                    // Validar colunas obrigatórias
                    const requiredColumns = ['Nome', 'Estado', 'Posto', 'Volume_Abastecido', 
                                           'Clientes_Atendidos', 'Recorrencia', 'Comissao_Total'];
                    
                    const fileColumns = Object.keys(jsonData[0]);
                    const missingColumns = requiredColumns.filter(col => !fileColumns.includes(col));
                    
                    if (missingColumns.length > 0) {
                        showStatus(`Colunas obrigatórias não encontradas: ${missingColumns.join(', ')}`, 'error');
                        return;
                    }

                    // Armazenar dados
                    dadosImportados = jsonData;
                    processarDados();
                    
                    const totalAptos = dadosProcessados.frentistas.filter(f => f.apto).length;
                    const totalNaoAptos = dadosProcessados.frentistas.filter(f => !f.apto).length;
                    
                    showStatus(`✅ Arquivo processado com sucesso! ${jsonData.length} registros importados. ${totalAptos} aptos, ${totalNaoAptos} não aptos.`, 'success');
                    
                    // Mostrar botão de começar
                    document.getElementById('startBtn').style.display = 'inline-block';
                    
                } catch (error) {
                    console.error('Erro ao processar arquivo:', error);
                    showStatus('Erro ao processar arquivo Excel. Verifique o formato.', 'error');
                }
            };
            
            reader.readAsArrayBuffer(file);
        }

        // Processar dados importados
        function processarDados() {
            if (!dadosImportados) return;

            // Processar frentistas com classificação de aptidão
            dadosProcessados.frentistas = dadosImportados.map(row => {
                const comissaoTotal = parseFloat(row.Comissao_Total) || 0;
                return {
                    nome: row.Nome,
                    estado: row.Estado,
                    posto: row.Posto,
                    volume: parseFloat(row.Volume_Abastecido) || 0,
                    clientes: parseInt(row.Clientes_Atendidos) || 0,
                    recorrencia: parseFloat(row.Recorrencia) || 0,
                    comissao_volume: parseFloat(row.Comissao_Volume) || 0,
                    comissao_cliente: parseFloat(row.Comissao_Cliente) || 0,
                    comissao_total: comissaoTotal,
                    apto: comissaoTotal >= LIMITE_APTIDAO
                };
            });

            // Processar postos
            const postosMap = {};
            dadosProcessados.frentistas.forEach(f => {
                if (!postosMap[f.posto]) {
                    postosMap[f.posto] = {
                        nome: f.posto,
                        estado: f.estado, // Garante que o estado do posto é o do primeiro frentista encontrado
                        frentistas: 0,
                        frentistas_aptos: 0,
                        frentistas_nao_aptos: 0,
                        volume_total: 0,
                        clientes_total: 0,
                        comissao_total: 0
                    };
                }
                postosMap[f.posto].frentistas++;
                if (f.apto) {
                    postosMap[f.posto].frentistas_aptos++;
                } else {
                    postosMap[f.posto].frentistas_nao_aptos++;
                }
                postosMap[f.posto].volume_total += f.volume;
                postosMap[f.posto].clientes_total += f.clientes;
                postosMap[f.posto].comissao_total += f.comissao_total;
            });

            dadosProcessados.postos = Object.values(postosMap);

            // Processar estados
            const estadosMap = {};
            dadosProcessados.frentistas.forEach(f => {
                if (!estadosMap[f.estado]) {
                    estadosMap[f.estado] = {
                        estado: f.estado,
                        frentistas: 0,
                        frentistas_aptos: 0,
                        frentistas_nao_aptos: 0,
                        postos: new Set(),
                        volume_total: 0,
                        clientes_total: 0,
                        comissao_total: 0
                    };
                }
                estadosMap[f.estado].frentistas++;
                if (f.apto) {
                    estadosMap[f.estado].frentistas_aptos++;
                } else {
                    estadosMap[f.estado].frentistas_nao_aptos++;
                }
                estadosMap[f.estado].postos.add(f.posto);
                estadosMap[f.estado].volume_total += f.volume;
                estadosMap[f.estado].clientes_total += f.clientes;
                estadosMap[f.estado].comissao_total += f.comissao_total;
            });

            dadosProcessados.estados = Object.values(estadosMap).map(e => ({
                ...e,
                postos: e.postos.size,
                percentual_aptidao: e.frentistas > 0 ? (e.frentistas_aptos / e.frentistas * 100) : 0
            }));

            console.log('Dados processados:', dadosProcessados);
        }

        // Mostrar mensagem de status
        function showStatus(message, type) {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.className = `status-message status-${type}`;
            statusElement.style.display = 'block';

            if (type === 'success') {
                setTimeout(() => {
                    statusElement.style.display = 'none';
                }, 5000);
            }
        }

        // Gerar dashboard
        function generateDashboard() {
            if (!dadosImportados || dadosProcessados.frentistas.length === 0) {
                showStatus('Nenhum dado válido encontrado para gerar o dashboard.', 'error');
                return;
            }

            // Ocultar seção de importação
            document.querySelector('.import-section').style.display = 'none';
            
            // Mostrar dashboard
            const dashboardContent = document.getElementById('dashboardContent');
            dashboardContent.classList.add('show');

            // Atualizar filtros
            atualizarFiltros();
            
            // Atualizar cards de resumo
            atualizarResumo();
            
            // Gerar gráficos
            updateCharts();

            showStatus('Dashboard gerado com sucesso!', 'success');
        }

        // Atualizar filtros
        function atualizarFiltros() {
            // Filtro de estados
            const estadoSelect = document.getElementById('estadoFilter');
            estadoSelect.innerHTML = '<option value="todos">Todos os Estados</option>';
            
            const estados = [...new Set(dadosProcessados.frentistas.map(f => f.estado))].sort();
            estados.forEach(estado => {
                const option = document.createElement('option');
                option.value = estado;
                option.textContent = estado;
                estadoSelect.appendChild(option);
            });

            // Filtro de postos
            atualizarFiltroPostos();
        }

        // Atualizar filtro de postos
        function atualizarFiltroPostos() {
            const estadoSelecionado = document.getElementById('estadoFilter').value;
            const postoSelect = document.getElementById('postoFilter');
            
            postoSelect.innerHTML = '<option value="todos">Todos os Postos</option>';
            
            // Obter lista de postos únicos dos dados filtrados (não dos dadosProcessados.postos)
            // Isso garante que o filtro de posto só mostre postos relevantes para o estado selecionado
            const postosUnicosFiltrados = new Set();
            aplicarFiltrosSemPosto().forEach(frentista => {
                postosUnicosFiltrados.add(frentista.posto);
            });

            const postosOrdenados = Array.from(postosUnicosFiltrados).sort();

            postosOrdenados.forEach(posto => {
                const option = document.createElement('option');
                option.value = posto;
                option.textContent = posto;
                postoSelect.appendChild(option);
            });
        }

        // Atualizar cards de resumo
        function atualizarResumo() {
            const dadosFiltrados = aplicarFiltros();
            
            const totalFrentistas = dadosFiltrados.length;
            const totalAptos = dadosFiltrados.filter(f => f.apto).length;
            const totalNaoAptos = dadosFiltrados.filter(f => !f.apto).length;
            
            // Calcular postos únicos dos dados filtrados
            const postosUnicos = [...new Set(dadosFiltrados.map(f => f.posto))].length;
            
            const volumeTotal = dadosFiltrados.reduce((sum, f) => sum + f.volume, 0);
            const comissaoTotal = dadosFiltrados.reduce((sum, f) => sum + f.comissao_total, 0);

            // Atualizar valores nos cards
            document.getElementById('totalFrentistas').textContent = totalFrentistas;
            document.getElementById('totalAptos').textContent = totalAptos;
            document.getElementById('totalNaoAptos').textContent = totalNaoAptos;
            document.getElementById('totalPostos').textContent = postosUnicos;
            document.getElementById('volumeTotal').textContent = formatNumber(volumeTotal) + 'L';
            document.getElementById('comissaoTotal').textContent = 'R\$ ' + formatNumber(comissaoTotal);

            // Atualizar estado ativo dos cards
            atualizarEstadoCards();
        }

        // Atualizar estado ativo dos cards
        function atualizarEstadoCards() {
            // Remover todas as classes active
            document.querySelectorAll('.summary-card').forEach(card => {
                card.classList.remove('active');
            });

            // Adicionar classe active baseado no filtro atual
            const aptidaoFilter = document.getElementById('aptidaoFilter').value;
            
            if (aptidaoFilter === 'apto') {
                document.getElementById('cardTotalAptos').classList.add('active');
                filtroAtivo = 'apto';
                showFilterIndicator('Apenas Frentistas Aptos');
            } else if (aptidaoFilter === 'nao_apto') {
                document.getElementById('cardTotalNaoAptos').classList.add('active');
                filtroAtivo = 'nao_apto';
                showFilterIndicator('Apenas Frentistas Não Aptos');
            } else if (aptidaoFilter === 'todos') {
                // Verifica se o filtro 'todos' foi ativado por um card ou por outro filtro
                if (filtroAtivo === 'total') { // Se veio do card "Total Frentistas"
                    document.getElementById('cardTotalFrentistas').classList.add('active');
                    showFilterIndicator('Todos os Frentistas');
                } else { // Se veio de outro filtro ou reset
                    hideFilterIndicator();
                    filtroAtivo = null;
                }
            }
        }

        // Função para formatar números
        function formatNumber(num) {
            if (num >= 1000000) {
                return (num / 1000000).toFixed(1) + 'M';
            } else if (num >= 1000) {
                return (num / 1000).toFixed(1) + 'K';
            }
            return num.toLocaleString('pt-BR');
        }

        // Aplicar filtros aos dados
        function aplicarFiltros() {
            const estadoSelecionado = document.getElementById('estadoFilter').value;
            const postoSelecionado = document.getElementById('postoFilter').value;
            const aptidaoSelecionada = document.getElementById('aptidaoFilter').value;

            let dadosFiltrados = dadosProcessados.frentistas;

            if (estadoSelecionado !== 'todos') {
                dadosFiltrados = dadosFiltrados.filter(f => f.estado === estadoSelecionado);
            }

            if (postoSelecionado !== 'todos') {
                dadosFiltrados = dadosFiltrados.filter(f => f.posto === postoSelecionado);
            }

            if (aptidaoSelecionada !== 'todos') {
                if (aptidaoSelecionada === 'apto') {
                    dadosFiltrados = dadosFiltrados.filter(f => f.apto);
                } else if (aptidaoSelecionada === 'nao_apto') {
                    dadosFiltrados = dadosFiltrados.filter(f => !f.apto);
                }
            }

            return dadosFiltrados;
        }

        // Função auxiliar para aplicar filtros, mas ignorando o filtro de posto
        // Usado para popular o dropdown de postos corretamente
        function aplicarFiltrosSemPosto() {
            const estadoSelecionado = document.getElementById('estadoFilter').value;
            const aptidaoSelecionada = document.getElementById('aptidaoFilter').value;

            let dadosFiltrados = dadosProcessados.frentistas;

            if (estadoSelecionado !== 'todos') {
                dadosFiltrados = dadosFiltrados.filter(f => f.estado === estadoSelecionado);
            }

            if (aptidaoSelecionada !== 'todos') {
                if (aptidaoSelecionada === 'apto') {
                    dadosFiltrados = dadosFiltrados.filter(f => f.apto);
                } else if (aptidaoSelecionada === 'nao_apto') {
                    dadosFiltrados = dadosFiltrados.filter(f => !f.apto);
                }
            }
            return dadosFiltrados;
        }

        // Função para criar gráfico de pizza (Aptidão)
        function criarGraficoPizza() {
            const dadosFiltrados = aplicarFiltros();
            
            const aptos = dadosFiltrados.filter(f => f.apto).length;
            const naoAptos = dadosFiltrados.filter(f => !f.apto).length;

            const trace = {
                labels: ['Aptos (≥ R\$ 100)', 'Não Aptos (< R\$ 100)'],
                values: [aptos, naoAptos],
                type: 'pie',
                marker: {
                    colors: [cores.verde, cores.vermelho]
                },
                textinfo: 'label+percent+value', // Adicionado 'value' para mostrar o número
                textposition: 'outside',
                hovertemplate: '<b>%{label}</b><br>Quantidade: %{value}<br>Percentual: %{percent}<extra></extra>'
            };

            const layout = {
                title: '',
                plot_bgcolor: cores.branco,
                paper_bgcolor: cores.branco,
                font: { family: 'Arial', size: 12 }
            };

            Plotly.newPlot('pieChart', [trace], layout, {responsive: true});
        }

        // Função para criar gráfico de barras
        function criarGraficoBarras() {
            const metricaSelecionada = document.getElementById('metricaFilter').value;
            const dadosFiltrados = aplicarFiltros();

            // Ordenar por métrica selecionada e pegar top 10
            const top10 = dadosFiltrados
                .sort((a, b) => b[metricaSelecionada] - a[metricaSelecionada])
                .slice(0, 10);
            
            const trace = {
                x: top10.map(f => f.nome),
                y: top10.map(f => f[metricaSelecionada]),
                type: 'bar',
                marker: {
                    color: top10.map(f => f.apto ? cores.verde : cores.vermelho),
                    line: {color: cores.primaria, width: 1}
                },
                text: top10.map(f => formatMetricValue(f[metricaSelecionada], metricaSelecionada)), // Adicionado rótulo de dados
                textposition: 'auto', // Posição automática do rótulo
                hovertemplate: '<b>%{x}</b><br>Valor: %{y:,.2f}<br>Status: ' + 
                              top10.map(f => f.apto ? 'Apto' : 'Não Apto').join('<br>Status: ') + '<extra></extra>'
            };

            const layout = {
                title: '',
                xaxis: {title: 'Frentistas', tickangle: -45},
                yaxis: {title: getMetricaLabel(metricaSelecionada)},
                plot_bgcolor: cores.branco,
                paper_bgcolor: cores.branco,
                font: { family: 'Arial', size: 12 }
            };

            Plotly.newPlot('barChart', [trace], layout, {responsive: true});
        }

        // Função para criar gráfico de aptidão por estado
        function criarGraficoPostos() {
            const estadoSelecionado = document.getElementById('estadoFilter').value;
            let dadosEstados = dadosProcessados.estados;
            
            if (estadoSelecionado !== 'todos') {
                dadosEstados = dadosProcessados.estados.filter(e => e.estado === estadoSelecionado);
            }

            const trace1 = {
                x: dadosEstados.map(e => e.estado),
                y: dadosEstados.map(e => e.frentistas_aptos),
                type: 'bar',
                name: 'Frentistas Aptos',
                marker: {color: cores.verde},
                text: dadosEstados.map(e => e.frentistas_aptos), // Adicionado rótulo de dados
                textposition: 'auto',
                hovertemplate: '<b>%{x}</b><br>Aptos: %{y}<extra></extra>'
            };

            const trace2 = {
                x: dadosEstados.map(e => e.estado),
                y: dadosEstados.map(e => e.frentistas_nao_aptos),
                type: 'bar',
                name: 'Frentistas Não Aptos',
                marker: {color: cores.vermelho},
                text: dadosEstados.map(e => e.frentistas_nao_aptos), // Adicionado rótulo de dados
                textposition: 'auto',
                hovertemplate: '<b>%{x}</b><br>Não Aptos: %{y}<extra></extra>'
            };

            const layout = {
                title: '',
                xaxis: {title: 'Estados'},
                yaxis: {title: 'Quantidade de Frentistas'},
                barmode: 'stack',
                plot_bgcolor: cores.branco,
                paper_bgcolor: cores.branco,
                font: { family: 'Arial', size: 12 }
            };

            Plotly.newPlot('postosChart', [trace1, trace2], layout, {responsive: true});
        }

        // Função para criar gráfico de dispersão
        function criarGraficoDispersao() {
            const dadosFiltrados = aplicarFiltros();

            const trace = {
                x: dadosFiltrados.map(f => f.volume),
                y: dadosFiltrados.map(f => f.comissao_total),
                mode: 'markers',
                type: 'scatter',
                text: dadosFiltrados.map(f => f.nome),
                marker: {
                    size: dadosFiltrados.map(f => Math.max(8, f.clientes / 10)),
                    color: dadosFiltrados.map(f => f.apto ? cores.verde : cores.vermelho),
                    line: {color: cores.primaria, width: 1}
                },
                hovertemplate: '<b>%{text}</b><br>Volume: %{x:,.0f}L<br>Comissão: R\$ %{y:,.2f}<br>Status: ' +
                              dadosFiltrados.map(f => f.apto ? 'Apto' : 'Não Apto').join('<br>Status: ') + '<extra></extra>'
            };

            // Adicionar linha de referência para o limite de aptidão
            const maxVolume = Math.max(...dadosFiltrados.map(f => f.volume));
            const referenceLine = {
                x: [0, maxVolume],
                y: [LIMITE_APTIDAO, LIMITE_APTIDAO],
                mode: 'lines',
                type: 'scatter',
                name: 'Limite de Aptidão (R\$ 100)',
                line: {color: cores.primaria, width: 2, dash: 'dash'},
                hovertemplate: 'Limite de Aptidão: R\$ 100,00<extra></extra>'
            };

            const layout = {
                title: '',
                xaxis: {title: 'Volume Abastecido (L)'},
                yaxis: {title: 'Comissão Total (R\$)'},
                plot_bgcolor: cores.branco,
                paper_bgcolor: cores.branco,
                font: { family: 'Arial', size: 12 },
                showlegend: true
            };

            Plotly.newPlot('scatterChart', [trace, referenceLine], layout, {responsive: true});
        }

        // Função para criar rankings
        function criarRankings() {
            const dadosFiltrados = aplicarFiltros();
            const metricaSelecionada = document.getElementById('metricaFilter').value;

            // TOP 5 Frentistas Aptos
            const frentistasAptos = dadosFiltrados.filter(f => f.apto);
            const top5Aptos = frentistasAptos
                .sort((a, b) => b[metricaSelecionada] - a[metricaSelecionada])
                .slice(0, 5);
            
            document.getElementById('rankingFrentistasAptos').innerHTML = top5Aptos.length > 0 ? 
                top5Aptos.map((f, i) => 
                    `<div class="ranking-item apto">
                        <span class="ranking-position">${i + 1}º</span>
                        <span class="ranking-name">${f.nome}
                            <span class="aptidao-badge badge-apto">APTO</span>
                        </span>
                        <span class="ranking-value">${formatMetricValue(f[metricaSelecionada], metricaSelecionada)}</span>
                    </div>`
                ).join('') : '<p style="text-align: center; color: #666;">Nenhum frentista apto encontrado</p>';

            // Frentistas Não Aptos
            const frentistasNaoAptos = dadosFiltrados.filter(f => !f.apto);
            const topNaoAptos = frentistasNaoAptos
                .sort((a, b) => b[metricaSelecionada] - a[metricaSelecionada])
                .slice(0, 10);
            
            document.getElementById('rankingFrentistasNaoAptos').innerHTML = topNaoAptos.length > 0 ?
                topNaoAptos.map((f, i) => 
                    `<div class="ranking-item nao-apto">
                        <span class="ranking-position">${i + 1}º</span>
                        <span class="ranking-name">${f.nome}
                            <span class="aptidao-badge badge-nao-apto">NÃO APTO</span>
                        </span>
                        <span class="ranking-value">${formatMetricValue(f[metricaSelecionada], metricaSelecionada)}</span>
                    </div>`
                ).join('') : '<p style="text-align: center; color: #666;">Nenhum frentista não apto encontrado</p>';

            // TOP 10 Postos
            const top10Postos = dadosProcessados.postos
                .sort((a, b) => b.comissao_total - a.comissao_total)
                .slice(0, 10);
            
            document.getElementById('rankingPostos').innerHTML = top10Postos.map((p, i) => 
                `<div class="ranking-item">
                    <span class="ranking-position">${i + 1}º</span>
                    <span class="ranking-name">${p.nome} (${p.frentistas_aptos}/${p.frentistas} aptos)</span>
                    <span class="ranking-value">R\$ ${p.comissao_total.toLocaleString('pt-BR', {minimumFractionDigits: 2})}</span>
                </div>`
            ).join('');

            // Ranking por Estados
            const estadosOrdenados = dadosProcessados.estados
                .sort((a, b) => b.percentual_aptidao - a.percentual_aptidao);

            document.getElementById('rankingEstados').innerHTML = estadosOrdenados.map((e, i) => 
                `<div class="ranking-item">
                    <span class="ranking-position">${i + 1}º</span>
                    <span class="ranking-name">${e.estado} (${e.frentistas_aptos}/${e.frentistas} aptos)</span>
                    <span class="ranking-value">${e.percentual_aptidao.toFixed(1)}%</span>
                </div>`
            ).join('');
        }

        // Função auxiliar para formatar valores de métricas
        function formatMetricValue(value, metrica) {
            switch(metrica) {
                case 'comissao_total':
                case 'comissao_volume':
                case 'comissao_cliente':
                    return 'R\$ ' + value.toLocaleString('pt-BR', {minimumFractionDigits: 2});
                case 'volume':
                    return value.toLocaleString('pt-BR') + 'L';
                case 'clientes':
                    return value.toLocaleString('pt-BR');
                case 'recorrencia':
                    return (value * 100).toFixed(1) + '%';
                default:
                    return value.toLocaleString('pt-BR');
            }
        }

        // Função auxiliar para obter label da métrica
        function getMetricaLabel(metrica) {
            switch(metrica) {
                case 'comissao_total': return 'Comissão Total (R\$)';
                case 'volume': return 'Volume Abastecido (L)';
                case 'clientes': return 'Clientes Atendidos';
                case 'recorrencia': return 'Recorrência (%)';
                default: return metrica;
            }
        }

        // Função principal para atualizar todos os gráficos
        function updateCharts() {
            if (!dadosProcessados.frentistas.length) return;
            
            // Atualiza o filtro de postos ANTES de aplicar os filtros para os gráficos
            // Isso garante que o dropdown de postos reflita o estado e aptidão selecionados
            atualizarFiltroPostos(); 

            atualizarResumo();
            criarGraficoPizza();
            criarGraficoBarras();
            criarGraficoPostos();
            criarGraficoDispersao();
            criarRankings();
        }

        // Função para mostrar seção de importação novamente
        function showImportSection() {
            document.querySelector('.import-section').style.display = 'block';
            document.getElementById('dashboardContent').classList.remove('show');
            
            // Reset do formulário e filtros
            document.getElementById('fileInput').value = '';
            document.getElementById('fileInfo').classList.remove('show');
            document.getElementById('progressBar').style.display = 'none';
            document.getElementById('progressFill').style.width = '0%';
            document.getElementById('startBtn').style.display = 'none';
            document.getElementById('statusMessage').style.display = 'none';
            
            // Reset filtros e estado
            filtroAtivo = null;
            hideFilterIndicator();
            document.querySelectorAll('.summary-card').forEach(card => {
                card.classList.remove('active');
            });
        }

        // Adicionar interatividade entre gráficos
        function adicionarInteratividade() {
            // Evento de clique no gráfico de pizza
            document.getElementById('pieChart').on('plotly_click', function(data) {
                const label = data.points[0].label;
                
                if (label.includes('Aptos')) {
                    handleCardClick('apto');
                } else {
                    handleCardClick('nao_apto');
                }
            });

            // Evento de clique no gráfico de barras
            document.getElementById('barChart').on('plotly_click', function(data) {
                const frentista = data.points[0].x;
                const dadosFrentista = dadosProcessados.frentistas.find(f => f.nome === frentista);
                if (dadosFrentista) {
                    const statusAptidao = dadosFrentista.apto ? 'APTO' : 'NÃO APTO';
                    const statusColor = dadosFrentista.apto ? '🟢' : '🔴';
                    
                    alert(`${statusColor} Detalhes do frentista: ${frentista}\n\n` +
                          `📊 Status: ${statusAptidao}\n` +
                          `📍 Estado: ${dadosFrentista.estado}\n` +
                          `🏪 Posto: ${dadosFrentista.posto}\n` +
                          `⛽ Volume: ${dadosFrentista.volume.toLocaleString()} L\n` +
                          `👥 Clientes: ${dadosFrentista.clientes}\n` +
                          `🔄 Recorrência: ${(dadosFrentista.recorrencia * 100).toFixed(1)}%\n` +
                          `💰 Comissão Total: R\$ ${dadosFrentista.comissao_total.toLocaleString('pt-BR', {minimumFractionDigits: 2})}\n\n` +
                          `${dadosFrentista.apto ? '✅ Qualificado para bonificação' : '❌ Não qualificado para bonificação'}`);
                }
            });

            // Evento de clique no gráfico de postos
            document.getElementById('postosChart').on('plotly_click', function(data) {
                const estado = data.points[0].x;
                document.getElementById('estadoFilter').value = estado;
                updateCharts();
            });

            // Evento de clique no gráfico de dispersão
            document.getElementById('scatterChart').on('plotly_click', function(data) {
                const pontoIndex = data.points[0].pointIndex;
                const dadosFiltrados = aplicarFiltros();
                const frentista = dadosFiltrados[pontoIndex];
                
                if (frentista) {
                    const statusAptidao = frentista.apto ? 'APTO' : 'NÃO APTO';
                    const statusColor = frentista.apto ? '🟢' : '🔴';
                    
                    alert(`${statusColor} Análise detalhada: ${frentista.nome}\n\n` +
                          `📊 Status: ${statusAptidao}\n` +
                          `📍 Estado: ${frentista.estado}\n` +
                          `🏪 Posto: ${frentista.posto}\n` +
                          `⛽ Volume: ${frentista.volume.toLocaleString()} L\n` +
                          `👥 Clientes: ${frentista.clientes}\n` +
                          `🔄 Recorrência: ${(frentista.recorrencia * 100).toFixed(1)}%\n` +
                          `💰 Comissão Total: R\$ ${frentista.comissao_total.toLocaleString('pt-BR', {minimumFractionDigits: 2})}\n\n` +
                          `📈 Posição no gráfico:\n` +
                          `   X (Volume): ${frentista.volume.toLocaleString()} L\n` +
                          `   Y (Comissão): R\$ ${frentista.comissao_total.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`);
                }
            });
        }

        // Função para detectar mudanças nos filtros dropdown
        function setupFilterListeners() {
            // Listener para filtro de aptidão
            document.getElementById('aptidaoFilter').addEventListener('change', function() {
                const value = this.value;
                
                // Remover classes active de todos os cards
                document.querySelectorAll('.summary-card').forEach(card => {
                    card.classList.remove('active');
                });

                // Atualizar estado baseado no filtro
                if (value === 'apto') {
                    document.getElementById('cardTotalAptos').classList.add('active');
                    filtroAtivo = 'apto';
                    showFilterIndicator('Apenas Frentistas Aptos');
                } else if (value === 'nao_apto') {
                    document.getElementById('cardTotalNaoAptos').classList.add('active');
                    filtroAtivo = 'nao_apto';
                    showFilterIndicator('Apenas Frentistas Não Aptos');
                } else {
                    filtroAtivo = null;
                    hideFilterIndicator();
                }
                updateCharts(); // Chamar updateCharts após a mudança
            });

            // Listener para outros filtros
            document.getElementById('estadoFilter').addEventListener('change', function() {
                const value = this.value;
                if (value !== 'todos') {
                    showFilterIndicator(`Estado: ${value}`);
                } else if (filtroAtivo === null) {
                    hideFilterIndicator();
                }
                updateCharts(); // Chamar updateCharts após a mudança
            });

            document.getElementById('postoFilter').addEventListener('change', function() {
                const value = this.value;
                if (value !== 'todos') {
                    showFilterIndicator(`Posto: ${value}`);
                } else if (filtroAtivo === null && document.getElementById('estadoFilter').value === 'todos') {
                    hideFilterIndicator();
                }
                updateCharts(); // Chamar updateCharts após a mudança
            });

            document.getElementById('metricaFilter').addEventListener('change', updateCharts); // Chamar updateCharts após a mudança
        }

        // Função para adicionar efeitos visuais aos cards
        function setupCardEffects() {
            const cards = document.querySelectorAll('.summary-card.clickable');
            
            cards.forEach(card => {
                // Efeito de hover melhorado
                card.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('active')) {
                        this.style.transform = 'translateY(-8px) scale(1.02)';
                        this.style.boxShadow = '0 12px 24px rgba(0,0,0,0.15)';
                    }
                });

                card.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('active')) {
                        this.style.transform = '';
                        this.style.boxShadow = '';
                    }
                });

                // Efeito de clique
                card.addEventListener('mousedown', function() {
                    this.style.transform = 'translateY(-2px) scale(0.98)';
                });

                card.addEventListener('mouseup', function() {
                    setTimeout(() => {
                        if (this.classList.contains('active')) {
                            this.style.transform = 'translateY(-3px)';
                        } else {
                            this.style.transform = '';
                        }
                    }, 100);
                });
            });
        }

        // Função para criar tooltips informativos
        function setupTooltips() {
            const cards = document.querySelectorAll('.summary-card');
            
            cards.forEach(card => {
                card.addEventListener('mouseenter', function(e) {
                    const title = this.getAttribute('title');
                    if (title && !document.querySelector('.custom-tooltip')) {
                        const tooltip = document.createElement('div');
                        tooltip.className = 'custom-tooltip';
                        tooltip.textContent = title;
                        tooltip.style.cssText = `
                            position: absolute;
                            background: rgba(0,0,0,0.8);
                            color: white;
                            padding: 8px 12px;
                            border-radius: 6px;
                            font-size: 12px;
                            z-index: 1000;
                            pointer-events: none;
                            white-space: nowrap;
                        `;
                        document.body.appendChild(tooltip);
                        
                        const updatePosition = (e) => {
                            tooltip.style.left = (e.pageX + 10) + 'px';
                            tooltip.style.top = (e.pageY - 30) + 'px';
                        };
                        
                        updatePosition(e);
                        this.addEventListener('mousemove', updatePosition);
                    }
                });

                card.addEventListener('mouseleave', function() {
                    const tooltip = document.querySelector('.custom-tooltip');
                    if (tooltip) {
                        tooltip.remove();
                    }
                });
            });
        }

        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            setupDragAndDrop();
            setupFilterListeners();
            setupCardEffects();
            setupTooltips();
            
            // Adicionar interatividade após um delay para garantir que os gráficos foram criados
            // Isso só é necessário se houver dados pré-carregados. Com importação, não é crítico aqui.
            setTimeout(() => {
                if (dadosProcessados.frentistas.length > 0) {
                    adicionarInteratividade();
                }
            }, 1000);
        });
    </script>
</body>
</html>
      